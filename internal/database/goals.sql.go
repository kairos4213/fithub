// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: goals.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createGoal = `-- name: CreateGoal :one
INSERT INTO goals (
  id,
  created_at,
  updated_at,
  name,
  description,
  goal_date,
  notes,
  user_id
) VALUES (gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, description, goal_date, completion_date, notes, status, user_id
`

type CreateGoalParams struct {
	Name        string
	Description string
	GoalDate    time.Time
	Notes       sql.NullString
	UserID      uuid.UUID
}

func (q *Queries) CreateGoal(ctx context.Context, arg CreateGoalParams) (Goal, error) {
	row := q.db.QueryRowContext(ctx, createGoal,
		arg.Name,
		arg.Description,
		arg.GoalDate,
		arg.Notes,
		arg.UserID,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.GoalDate,
		&i.CompletionDate,
		&i.Notes,
		&i.Status,
		&i.UserID,
	)
	return i, err
}

const getAllUserGoals = `-- name: GetAllUserGoals :many
SELECT id, created_at, updated_at, name, description, goal_date, completion_date, notes, status, user_id FROM goals
WHERE user_id = $1
`

func (q *Queries) GetAllUserGoals(ctx context.Context, userID uuid.UUID) ([]Goal, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserGoals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Goal
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.GoalDate,
			&i.CompletionDate,
			&i.Notes,
			&i.Status,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoal = `-- name: UpdateGoal :one
UPDATE goals
SET updated_at = NOW(),
    name = $1,
    description = $2,
    goal_date = $3,
    completion_date = $4,
    notes = $5,
    status = $6
WHERE id = $7
RETURNING id, created_at, updated_at, name, description, goal_date, completion_date, notes, status, user_id
`

type UpdateGoalParams struct {
	Name           string
	Description    string
	GoalDate       time.Time
	CompletionDate sql.NullTime
	Notes          sql.NullString
	Status         string
	ID             uuid.UUID
}

func (q *Queries) UpdateGoal(ctx context.Context, arg UpdateGoalParams) (Goal, error) {
	row := q.db.QueryRowContext(ctx, updateGoal,
		arg.Name,
		arg.Description,
		arg.GoalDate,
		arg.CompletionDate,
		arg.Notes,
		arg.Status,
		arg.ID,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.GoalDate,
		&i.CompletionDate,
		&i.Notes,
		&i.Status,
		&i.UserID,
	)
	return i, err
}
